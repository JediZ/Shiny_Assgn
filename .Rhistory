library(shiny)
library(UsingR)
data(galton)
diabetesRisk <- function(glucose) glucose/200
shinyServer(
function(input,output){
output$inputValue <- renderPrint({input$glucose})
output$prediction <- renderPrint({diabetesRisk(input$glucose)})
output$odate <- renderPrint({input$date})
output$newHist <- renderPlot({
hist(galton$child,xlab='child height',col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu,mu),c(0,200),col='red',lwd=5)
mse <- mean((galton$child-mu)^2)
text(63,150,paste("mu = ",mu))
text(63,140,paste("MSE = ", round(mse,2)))
})
output$text3 <- renderText({
input$goButton
isolate(paste(input$glucose,input$date))
})
}
)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Diabetes prediction"),
sidebarPanel(
h1('Sidebar panel'),
h1('H1 text'),
numericInput('glucose','Glucose mg/dl',90,min=50,max=200,step=5),
# submitButton('Submit'),
actionButton("goButton","Go!"),
h2('H2 text'),
checkboxGroupInput("id2","Checkbox",
c("Value 1"="1",
"value 2"="2",
"Value 3"="3"
)
),
h3('H3 text'),
dateInput("date","Date:"),
h4('H4 text'),
sliderInput('mu','Guess at the mean',value=70,min=62,max=74,step=0.05)
),
mainPanel(
h3('Results of prediction'),
h4('You entered'),
verbatimTextOutput("inputValue"),
h4('Which resulted in a prediction of '),
verbatimTextOutput("prediction"),
h4('You entered'),
verbatimTextOutput("odate"),
h4('That is it.'),
plotOutput('newHist'),
code('some code'),
p('some ordinary text'),
textOutput('text3')
)
))
setwd("F:/mygits/Shiny_Assgn")
runApp()
require(stats)
require(graphics)
coplot(density~conc|Run,data=DNase,show.given=FALSE,type='b')
coplot(density~log(conc)|Run,data=DNase,show.given=FALSE,type='b')
fm1 <- nls(density~SSlogis(log(conc),Asym,xmid,scal),data=DNase,subset=Run==1)
fm2 <- nls(density~SSfp1(log(conc),A,B,xmid,scal),data=DNase,subset=Run==1)
fm2 <- nls(density~SSfpl(log(conc),A,B,xmid,scal),data=DNase,subset=Run==1)
summary(fp2)
summary(fm2)
anova(fm1,fm2)
?SSlogis
?SSfpl
head(DNase)
sapply(DNase,class)
levels(DNase$Run)
head(DNase)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?as.numeric
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x<- 0:0.1:4
x<- 0:0.1:4
x
x<- 0:40;x<- x/10
x
deltaX<- 0:40;deltaX<- deltaX/10
IonicCharacter<- 100* (1-exp(-0.25*deltaX^2))
plot(deltaX,IonicCharacter)
}, height=400,width=600,"l")
plot(deltaX,IonicCharacter,"l")
point(2,40)
points(2,40)
runApp()
points(abs(as.integer(input$select1)-as.integer(input$select2)),
percentIonicCharacter(
PaulingElectroNegativity[as.integer(input$select1)],
PaulingElectroNegativity[as.integer(input$select2)]
),col="red")
points(2,40,col="red")
plot(deltaX,IonicCharacter,"l",xlab="Abs(X1-X2)",ylab="Ionic %")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(slidify)
hill <- function(x, Km, Vm, h=1) {
xh <- x^h
Kmh <- Km^h
Vm*xh / (Kmh+xh)
}
Km <- 1
Vm <- 10
x <- (0:(4*Km*100))/100
h=2
y <- hill(x,Km,Vm,h)
plot(x,y,'l',ylim=c(0,Vm))
abline(h=c(0,Vm/2,Vm))
abline(v=c(0,Km))
?legeng
?legend
Km <- 1 ; Vm <- 10; x <- (0:(4*Km*100))/100
y1 <- hill(x,Km,Vm,h=1)
y2 <- hill(x,Km,Vm,h=2)
y4 <- hill(x,Km,Vm,h=4)
y10 <- hill(x,Km,Vm,h=10)
plot(x,y1,'l',col='red',ylim=c(0,Vm),ylab="Hill")
lines(x,y2,col='pink')
lines(x,y4,col='green')
lines(x,y10,col='blue')
abline(h=c(0,Vm/2,Vm))
abline(v=c(0,Km))
legend("bottomright", pch = 1, col = c("red","pink","green","blue"))
legend("bottomright", c("1","2","4","10"),pch = 1, col = c("red","pink","green","blue"))
$Hill(X;h) = V_m * X^h / (K_m^h + X^h)$
library(markdown)
require(devtools)
pkgs = c('slidify', 'slidifyLibraries')
install_github(pkgs, 'ramnathv', ref = 'dev')
library(slidify)
library(slidifyLibraries)
